<?php
/**
 * Implementation of hook_menu()
 *
 * This is subject to change and/or to disappear after the WSCII team
 * figures out how they want to deal with hook_menu() in the land of
 * Symfonized routes. Fo now the routes exist both here and in
 * extlink.routing.yml. 
 *
 * See http://drupal.org/node/1889790
 */
function extlink_menu() {
  $items = array();
  $items['admin/config/user-interface/extlink'] = array(
    'title' => 'External links',
    'description' => 'Alter the display of external links on the site.',
    'page callback' => 'drupal_get_form',
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
  );
  return $items;
}

/**
 * Implements hook_library_info().
 */
function extlink_library_info() {
  $libraries['drupal.extlink'] = array(
    'title' => 'Extlink',
     'version' => '1.0.1',
     'js' => array(
      drupal_get_path('module', 'extlink') . '/extlink.js' => array(),
    ),
    'dependencies' => array(
      array('system', 'jquery'),
      array('system', 'drupal'),
      array('system', 'drupalSettings'),
      array('system', 'drupal.form'),
    ),
  );
  return $libraries;
}

/**
 * Implementation of hook_init().
 */
function extlink_init() {
  drupal_add_library('extlink', 'drupal.extlink');
  $path = drupal_get_path('module', 'extlink');
  $config_obj = config('extlink.settings');

  // Both the following drupal_add_js() and the subsequent drupal_add_css()
  // remain here, rather than being moved into the 
  // extlink_library_info()/drupal_add_library() combo. This is because those 
  // two depend on runtime-discovered configuration settings to know what to
  // add - i.e. the js isn't static and the css may or may not be used.
  // @TODO: maybe use hook_library_info_alter() if/when options change and get
  // rid of drupal_add_js/css() altogether>>>
  drupal_add_js(array('extlink' => array(
    'extTarget'     => $config_obj->get('extlink_target'),
    'extClass'      => $config_obj->get('extlink_class'),
    'extSubdomains' => $config_obj->get('extlink_subdomains'),
    'extExclude'    => $config_obj->get('extlink_exclude'),
    'extInclude'    => $config_obj->get('extlink_include'),
    'extAlert'      => $config_obj->get('extlink_alert'),
    'extAlertText'  => $config_obj->get('extlink_alert_text'),
    'mailtoClass'   => $config_obj->get('extlink_mailto_class'))), 'setting'
  );
  
  // The css isn't included in the library_info() hook because it's semi-dynamic.
  // It is loaded or not depending on user option
  $extlink_css = $config_obj->get('extlink_css');
  if (!$extlink_css && ($config_obj->get('extlink_class') == 'ext' || $config_obj->get('extlink_mailto_class') == 'mailto')) {
    drupal_add_css($path . '/extlink.css', array('every_page' => TRUE));
  }
}

function extlink_settings($form,&$form_state) {
  $path = drupal_get_path('module', 'extlink');
  $config_obj = config('extlink.settings');
  $form = array();
  
  $form['extlink_class'] = array(
    '#type' => 'checkbox',
    '#title' => t('Add icon to external links'),
    '#return_value' => 'ext',
    '#default_value' => $config_obj->get('extlink_class'),
    '#description' => t('Places an !icon icon next to external links.', array('!icon' => theme_image(array('uri' => drupal_get_path('module', 'extlink') . '/extlink.png', 'alt' => t('External Links icon'), 'attributes' => NULL)))),
  );

  $form['extlink_mailto_class'] = array(
    '#type' => 'checkbox',
    '#title' => t('Add icon to mailto links'),
    '#return_value' => 'mailto',
    '#default_value' => $config_obj->get('extlink_mailto_class'),
    '#description' => t('Places an !icon icon next to mailto links.', array('!icon' => theme_image(array('uri' => drupal_get_path('module', 'extlink') . '/mailto.png', 'alt' => t('Email links icon'), 'attributes' => NULL)))),
  );

  $form['extlink_subdomains'] = array(
    '#type' => 'checkbox',
    '#title' => t('Consider subdomains internal'),
    '#default_value' => $config_obj->get('extlink_subdomains'),
    '#description' => t('If checked, links with the same primary domain will all be considered internal. A link from www.example.com to my.example.com would be considered internal. Links between the www. and non-www. domain are always considered internal.'),
  );

  $form['extlink_css'] = array(
    '#type' => 'checkbox',
    '#title' => t('Bypass the module\'s built-in css'),
    '#default_value' => $config_obj->get('extlink_css'),
    '#description' => t('If checked, do not use the css included with the module. Use this option if you instead include the css and link icons with your theme files.'),
  );

  $form['extlink_target'] = array(
    '#type' => 'checkbox',
    '#title' => t('Open external links in a new window'),
    '#return_value' => '_blank',
    '#default_value' => $config_obj->get('extlink_target'),
    '#description' => t('Should all external links be opened in a new window?'),
  );

  $form['extlink_alert'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display pop-up warnings'),
    '#return_value' => '_blank',
    '#default_value' => $config_obj->get('extlink_alert'),
    '#description' => t('Displays a pop-up warning when any external link is clicked.'),
  );

  $form['extlink_alert_text'] = array(
    '#type' => 'textarea',
    '#rows' => 3,
    '#title' => t('Pop-up warning text'),
    '#default_value' => $config_obj->get('extlink_alert_text'),
    '#description' => t('Text to display in the pop-up external link warning box.'),
    '#wysiwyg' => FALSE,
  );

  $patterns = array(
    '<em>(example\.com)</em> ' . t('Matches example.com.'),
    '<em>(example\.com)|(example\.net)</em> ' . t('Multiple patterns can be strung together by using a pipe. Matches example.com OR example.net.'),
    '<em>(links/goto/[0-9]+/[0-9]+)</em> ' . t('Matches links that go through the <a href="http://drupal.org/project/links">Links module</a> redirect.'),
  );

  $wildcards = array(
    '<em>.</em> ' . t('Matches any character.'),
    '<em>?</em> ' . t('The previous character or set is optional.'),
    '<em>\d</em> ' . t('Matches any digit (0-9).'),
    '<em>[a-z]</em> ' . t('Brackets may be used to match a custom set of characters. This matches any alphabetic letter.'),
  );

  $form['patterns'] = array(
    '#tree' => FALSE,
    '#type' => 'fieldset',
    '#title' => t('Pattern matching'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#description' =>
      '<p>' . t('External links uses patterns (regular expressions) to match the "href" property of links.') . '</p>' .
      t('Here are some common patterns.') .
      theme('item_list', $patterns) .
      t('Common special characters:') .
      theme('item_list', $wildcards) .
      '<p>' . t('All special characters (<em>^ $ . ? ( ) | * +</em>) must also be escaped with backslashes. Patterns are not case-sensitive. Any <a href="http://www.javascriptkit.com/javatutors/redev2.shtml">pattern supported by JavaScript</a> may be used.') . '</p>',
  );

  $form['patterns']['extlink_exclude'] = array(
    '#type' => 'textfield',
    '#title' => t('Exclude links matching the pattern'),
    '#maxlength' => NULL,
    '#default_value' => $config_obj->get('extlink_exclude'),
    '#description' => t('Enter a regular expression for links that you wish to exclude from being considered external.'),
  );

  $form['patterns']['extlink_include'] = array(
    '#type' => 'textfield',
    '#title' => t('Include links matching the pattern'),
    '#maxlength' => NULL,
    '#default_value' => $config_obj->get('extlink_include'),
    '#description' => t('Enter a regular expression for internal links that you wish to be considered external.'),
  );

  return system_config_form($form, $form_state);
}

/**
 * Form submission handler for extlink_settings_form().
 */
function extlink_settings_submit($form, &$form_state) {
  $config_obj = config('extlink.settings');
  $config_obj->set('extlink_target', $form_state['values']['extlink_target']);
  $config_obj->set('extlink_class', $form_state['values']['extlink_class']);
  $config_obj->set('extlink_subdomains', $form_state['values']['extlink_subdomains']);
  $config_obj->set('extlink_mailto_class', $form_state['values']['extlink_mailto_class']);
  $config_obj->set('extlink_alert', $form_state['values']['extlink_alert']);
  $config_obj->set('extlink_alert_text', $form_state['values']['extlink_alert_text']);
  $config_obj->set('extlink_exclude', $form_state['values']['extlink_exclude']);
  $config_obj->set('extlink_include', $form_state['values']['extlink_include']);
  $config_obj->set('extlink_css', $form_state['values']['extlink_css']);
  $config_obj->save();
}
